
; This is the resident BIOS code.

; This is loaded into &fc00; common memory.
; It's been assembled with z80asm and compared against the original
; binary file to ensure they match.

org 0xfc00

bios_BOOT:
		JP 0xBA0F
bios_WBOOT:
		JP entry_WARMBOOT
bios_CONST:
		JP entry_CONST
bios_CONIN:
		JP entry_CONIN
bios_CONOUT:
		JP entry_CONOUT
bios_LIST:
		JP entry_LIST
bios_PUNCH:
		JP entry_PUNCH
bios_READER:
		JP entry_READER
bios_HOME:
		JP 0xBB85
bios_SELDSK:
		JP entry_SELDSK
bios_SETTRK:
		JP 0xBB88
bios_SETSEC:
		JP 0xBB8D
bios_SETDMA:
		JP 0xBB92
bios_READ:
		JP entry_READ
bios_WRITE:
		JP entry_WRITE
bios_LISTST:
		JP entry_LISTST
bios_SECTRAN:
		JP 0xBB9D
bios_CONOST:
		JP entry_CONOST
bios_AUXIST:
		JP entry_AUXIST
bios_AUXOST:
		JP entry_AUXOST
bios_DEVTBL:
		JP entry_DEVTBL
bios_DEVINI:
		JP entry_DEVINI
bios_DRVTBL:
		JP entry_DRVTBL
bios_MULTIIO:
		JP 0xBB9F
bios_FLUSH:
		JP 0xBBC0
bios_MOVE:
		JP entry_MOVE
bios_TIME:
		JP entry_TIME
bios_SELMEM:
		JP entry_SELMEM
bios_SETBNK:
		JP 0xBB99
bios_XMOVE:
		JP entry_XMOVE
bios_USERF:
		JP entry_USERF
bios_RESERV1:
		JP 0x0000
bios_RESERV2:
		JP 0x0000

; End of jump table

; Start of bios WARMBOOT
entry_WARMBOOT:
		DI
		LD SP, 0xFF18		; temp SP?
		CALL label_fc9e
		EI
		LD BC, 0x0102
		CALL entry_XMOVE
		LD BC, 0x0C80		; length of ...
		LD DE, 0x6D80		; start of in-memory copy of CCP.COM
		LD HL, 0x0100		; where to copy it
		PUSH HL
		JR entry_MOVE		; and jump into MOVE

		LD HL, internal_10
		LD (label_fdb7+1), HL
		LD HL, (0x0039)
		LD (xbios_hl), HL
		LD BC, label_fdb7; Infinite loop into RST 38h
		LD (0x0039), BC
		CALL label_fc9e		; Call whatever this is
		LD (0x0038), A		; Restore
		LD (0x0039), BC		; the RST 38 vector
		EI			; Re-enable interrupts
		JP 0xED9D		; ???

; Internal routine?
label_fc9e:
		DI
		LD A, 0x01
		CALL l_fd3b
		LD A, 0xC3		; JP instruction
		LD HL, bios_WBOOT	; &FC03 address
		LD (0x0000), A		; Program into JP &0000
		LD (0x0001), HL
		LD HL, (0xFBFE)		; Load address from &FBFE
		LD (0x0005), A		; JP @ &0005
		LD (0x0006), HL		; Program into JP &0005
		POP DE			; Get return address
		LD L, 0x00
		LD SP, HL		; SP = address from &FBFE,
					; but with &00 lower byte
		EX DE, HL		; DE<->HL, HL now has
					; return address
		JP (HL)			; jump to return address

; XMOVE entry point
entry_XMOVE:
		LD (selmem_copysrc), BC	; store src (C) /dest (B)
					; banks in &FE71
					; for a MOVE call.
		RET

; MOVE entry point
entry_MOVE:
		LD A, (selmem_copysrc)
		INC A
		JR NZ, l_89
		EX DE, HL
		LDIR
		EX DE, HL
		RET

l_89:
		CALL xbios_jump_entry		; XBIOS @ FCD3?
		DEFW 0xFCD3
		EXX			; Exchange BC/DE/HL and alt
		PUSH DE
		PUSH HL
		EXX			; Exchange BC/DE/HL and alt
		PUSH BC
		LD A, (selmem_copydst)
		CALL internal_11
		EX DE, HL
		EXX			; Exchange BC/DE/HL and alt
		EX DE, HL
		LD A, (selmem_copysrc)

l_90:
		CALL internal_11
		EXX
		POP BC
		PUSH HL
		PUSH DE
		PUSH BC
		CALL 0x0104		; TPA? Or CP/M hidden?
		POP BC
		POP HL
		ADD HL, BC
		EX DE, HL
		POP HL
		ADD HL, BC
		EXX
		POP HL
		POP DE
		EXX
		JR unknown_112

; internal function?
internal_11:
		CP 0x02
		JR NC, unknown_111
		RRA
		LD A, H
		RLA
		RLA
		RLA
		AND 0x07
		OR 0x80
		EXX
		CP 0x82
		LD L, 0x83
		JR Z, unknown_110
		LD L, A
		CP 0x83
		JR NZ, unknown_110
		LD L, 0x87

unknown_110:
		LD H, A
		INC A
		XOR H
		AND 0x03
		XOR H
		CP 0x82
		LD H, 0x83
		RET Z
		LD H, A
		CP 0x83
		RET NZ
		LD H, 0x87
		RET

unknown_111:
		EXX
		ADD A, 0x86
		LD H, A
		LD L, A
		RET

unknown_112:
		LD A, 0xFF
		LD (selmem_copysrc), A
		XOR A

; SELMEM entry point
entry_SELMEM:
		DI
		CALL l_fd3b
		EI
		RET

internal_12:
			XOR A

; internal selmem?
l_fd3b:
		LD (selmem_a), A
		PUSH HL
		LD L, A
		LD A, 0x80
		OUT (0xF0), A		; &0000->&3FFF = Bank &80
		LD A, L
		DEC A
		JR Z, l_120
		INC A
		LD HL, 0x8381		; bank numbers?
		JR Z, l_121
		LD L, 0x88
		CP 0x02
		JR Z, l_121
		ADD A, 0x86
		LD L, A
l_121:
		LD (0x0061), HL
		JR l_122
l_120:
		LD HL, 0x8685		; bank numbers?
		LD (0x0061), HL
		LD A, 0x84
		OUT (0xF0), A		; &0000->&3FFF = Bank ...

l_122:
		LD A, L
		OUT (0xF1), A		; &4000->&7FFF = Bank in L
		LD A, H
		OUT (0xF2), A		; &8000->&BFFF = Bank in H
		POP HL
		RET

; USERF entry point (ie, calling into XBIOS)
entry_USERF:
		LD (userf_hl), HL	; store HL
		POP HL			; Get return address -
					; which is the arg.
		PUSH HL			; back on stack you go
		INC HL			; HL now points to
		INC HL			; the instruction after
					; the arg
		EX (SP), HL		; update stack return addr
		PUSH HL			; ?
		LD HL, (userf_hl)	; restore HL

; Some intermediary internal call routine as well?
; it looks like it takes the two bytes (word) after the
; call instruction as an XBIOS address to switch bank and
; jump into?
;
; Original @ &FD7A

xbios_jump_entry:
		DI
		EX AF, AF'		; Ex AF and alt
		EXX			; Ex BC, DE, HL and alt
		EX (SP), HL		; Exchange HL with what's @ SP
					; .. which should be the
					; argument
					; so arg in HL, (SP) now has
					; what was in HL
		LD (temp_sp), SP	; Store SP for now
		LD SP, 0xFF18		; temp SP?
		PUSH DE
		PUSH AF
		LD E, (HL)
		INC HL
		LD D, (HL)
		LD A, (selmem_a)
		PUSH AF
		CALL internal_12
		LD HL, (xbios_hl)
		LD (label_fdb7+1), HL
		CALL internal_13
		DI
		EX AF, AF'
		EXX
		LD HL, internal_10
		LD (label_fdb7+1), HL
		POP AF
		CALL l_fd3b
		POP AF
		POP DE
		LD SP, (temp_sp)	; restore SP
		POP HL
		EX AF, AF'
		EXX
		EI
		RET

; Internal routine - &fdb2
internal_13:
		PUSH DE		; store for returnining into
		EX AF, AF'	; flip norm/alt reg
		EXX		; ...
		EI		; re-enable interrupts
		RET		; Jump to where DE points to?

; Infinite loop function, which does get overwritten?
; likely used to handle "things crashed" sideways so they could
; debug it.
;
; Hm, maybe it's a jump table indirection?  Code is overwriting
; the address at FDB8.

label_fdb7:
	defb 0xc3, 0xb7, 0xfd		; JP &FDB7

; internal function - &fdba
internal_10:
		DI
		LD (temp_sp), SP	; temp store SP
		LD SP, 0xFF18		; temp SP?

		PUSH AF
		PUSH HL
		LD HL, (xbios_hl)
		LD (label_fdb7+1), HL
		LD A, 0x80
		OUT (0xF0), A		; &0000->&3FFF = Bank &80
		RST 0x38		; restart &0038

		DI
		LD A, (selmem_a)
		DEC A
		JR NZ, l_150
		LD A, 0x84
		OUT (0xF0), A		; &0000->&3FFF = bank &84

l_150:
		LD HL, internal_10
		LD (label_fdb7+1), HL

		POP HL
		POP AF
		LD SP, (temp_sp)	; restore SP
		EI
		RET

; DEVINI entry point
entry_DEVINI:
		CALL xbios_jump_entry		; XBIOS @ &BB40
		DEFW 0xBB40

; DEVTBL entry point
entry_DEVTBL:
		LD HL, 0xFF50

; TIME entry point (convenient NULL return point, ha)
entry_TIME:
		RET

; PUNCH entry point
entry_PUNCH:
		LD HL, (0xFBC4)
		JR l_160

; LIST entry point
entry_LIST:
		LD HL, (0xFBC6)
		JR l_160

; CONOUT entry point
entry_CONOUT:
		LD HL, (0xFBC0)

l_160:
		CALL xbios_jump_entry		; XBIOS @ &BAA7
		DEFW 0xBAA7

; AUXOST entry point
entry_AUXOST:
		LD HL, (0xFBC4)
		JR l_165

; LISTST entry point
entry_LISTST:
		LD HL, (0xFBC6)
		JR l_165

; CONOST entry point
entry_CONOST:
		LD HL, (0xFBC0)

l_165:
		CALL xbios_jump_entry		; XBIOS @ &BA88
		DEFW 0xBA88

; AUXIST entry point
entry_AUXIST:
		LD HL, (0xFBC2)
		JR l_170

; CONST entry point
entry_CONST:
		LD HL, (0xFBBE)
		LD A, H
		XOR 0x80

		OR L
		JR NZ, l_170
		LD A, (0xFFF8)
		OR A
		RET Z

l_170:
		CALL xbios_jump_entry		; XBIOS @ &BA78
		DEFW 0xBA78

; READER entry point
entry_READER:
		LD HL, (0xFBC2)
		JR l_180

; CONIN entry point
entry_CONIN:
		LD HL, (0xFBBE)

l_180:
		CALL xbios_jump_entry		; XBIOS @ &BB35
		DEFW 0xBB35

; DRVTBL entry point
entry_DRVTBL:
		LD HL, drvtbl_table
		RET

; SELDSK entry point
entry_SELDSK:
		CALL xbios_jump_entry		; XBIOS @ &BBA0
			DEFW 0xBBA0

; READ entry point
entry_READ:
		CALL xbios_jump_entry
		DEFW 0xBBB8

; WRITE entry point
entry_WRITE:
		CALL xbios_jump_entry		; XBIOS @ &BBBC
		DEFW 0xBBBC

; DRVTBL table contents
drvtbl_table:
		DEFW 0xBDA3
		DEFW 0xBDC0

tail_padding:

		DEFB 0x00
		DEFW 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		DEFW 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

; needs to be padded to be a size = &280.
; Since it looks like the last 17 bytes (&FE70 -> &FE7F) are used
; for temporary storage?

; one byte @ 0xFE70
selmem_a:	DEFB 0x00

; two bytes
selmem_copysrc: DEFB 0x00
selmem_copydst: DEFB 0x00

; two bytes
temp_sp:	DEFW 0x00

; two bytes
userf_hl:	DEFW 0x00

; two bytes
xbios_hl:	DEFW 0x00

tail_padding_2:
		DEFB 0x00
		DEFW 0x00, 0x00, 0x00
